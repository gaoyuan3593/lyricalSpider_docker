#! /usr/bin/python3
# -*- coding: utf-8 -*-
import base64

from crypto.Cipher import AES

BS = 16
pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
unpad = lambda s: s[0:-ord(s[-1])]


class AESCipher:
    def __init__(self, key, iv):
        """
        Requires hex encoded param as a key
        """
        self.key = key.encode('utf-8')
        self.iv = iv.encode('utf-8')

    def encrypt(self, raw):
        """
        Returns hex encoded encrypted value!
        """
        raw = pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return cipher.encrypt(raw)

    def decrypt(self, enc):
        """
        Requires hex encoded param to decrypt
        """
        cipher = AES.new(self.key, AES.MODE_CBC, self.iv)
        return unpad(cipher.decrypt(enc).decode('utf-8'))


if __name__ == '__main__':
    key = '57c44fe549475913'
    iv = 'b791953e85a95985'

    t = 'Sn1BtjdM7hm0BQHo1SHFu/TKn/3Q5EzpBfAShSrD1q0='
    t = "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"
    plaintext = '{"TotalCount":"0"}'

    z = AESCipher(key, iv)
    k = z.encrypt(plaintext)
    print(base64.b64encode(k))
    m = base64.b64decode(t)
    print(z.decrypt(m))